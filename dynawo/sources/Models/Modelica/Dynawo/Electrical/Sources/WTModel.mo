within Dynawo.Electrical.Sources;

package WTModel

  model WTModel
  Dynawo.Electrical.Sources.WTModel.ElectricalSystem electricalSystem annotation(
      Placement(visible = true, transformation(origin = {-40, 40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
  Dynawo.Electrical.Sources.WTModel.GeneratorSystem.PLL pll annotation(
      Placement(visible = true, transformation(origin = {-45, -27}, extent = {{-13, -13}, {13, 13}}, rotation = 0)));
  equation
  connect(electricalSystem.uqGsPu, pll.uqGsPu) annotation(
      Line(points = {{-52, 18}, {-51.5, 18}, {-51.5, -13}}, color = {0, 0, 127}));
  connect(electricalSystem.PagPu, pll.udGsPu) annotation(
      Line(points = {{-40, 18}, {-38.5, 18}, {-38.5, -13}}, color = {0, 0, 127}));
  connect(pll.theta, generatorModel.theta) annotation(
      Line(points = {{-31, -27}, {40, -27}, {40, 18}}, color = {0, 0, 127}));
  end WTModel;

  extends Icons.Package;

  model ElectricalSystem

    import Modelica;
    import Dynawo;
    import Dynawo.Types;
    import Dynawo.Electrical.SystemBase;

    parameter Types.ApparentPowerModule SNom "Nominal converter apparent power in MVA";
    parameter Types.PerUnit Res "Electrical System resistance in p.u (base UNom, SNom)";
    parameter Types.PerUnit Les "Electrical System inductance in p.u (base UNom, SNom)";
    parameter Types.ComplexPerUnit u0Pu "Start value of the complex voltage at plant terminal (PCC) in p.u (base UNom)";
    parameter Types.ComplexPerUnit i0Pu "Start value of the complex current at plant terminal (PCC) in p.u (base UNom, SnRef) (receptor convention)";
    parameter Types.ActivePowerPu P0Pu "Start value of active power at the PCC in p.u (base SnRef) (receptor convention)";
    parameter Types.PerUnit udGs0Pu;
    parameter Types.PerUnit uqGs0Pu;

    Dynawo.Connectors.ACPower terminal(V(re(start = u0Pu.re), im(start = u0Pu.im)), i(re(start = i0Pu.re), im(start = i0Pu.im))) "Connector used to connect the converter to the grid" annotation(
          Placement(visible = true, transformation(extent = {{0, 0}, {0, 0}}, rotation = 0), iconTransformation(origin = {-105, -1}, extent = {{-5, -5}, {5, 5}}, rotation = 0)));

    Modelica.Blocks.Interfaces.BooleanInput running(start = true) annotation(
          Placement(visible = true, transformation(origin = {0, 118}, extent = {{-19, -19}, {19, 19}}, rotation = -90), iconTransformation(origin = {0, 110}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
    Modelica.Blocks.Interfaces.RealInput omegaPu(start = SystemBase.omegaRef0Pu) "Converter angular frequency in p.u (base OmegaNom)" annotation(
          Placement(visible = true, transformation(origin = {-120.5, -0.5}, extent = {{-19.5, -19.5}, {19.5, 19.5}}, rotation = 0), iconTransformation(origin = {110, -60}, extent = {{-10, -10}, {10, 10}}, rotation = 180)));
    Modelica.Blocks.Interfaces.RealInput idGsPu(start = i0Pu.re) "d-axis current at the WTT in p.u (base UNom)" annotation(
          Placement(visible = true, transformation(origin = {-121, 60}, extent = {{-21, -21}, {21, 21}}, rotation = 0), iconTransformation(origin = {111, 60}, extent = {{-10, -10}, {10, 10}}, rotation = 180))) ;
    Modelica.Blocks.Interfaces.RealInput iqGsPu(start = i0Pu.im) "q-axis current at the WTT in p.u (base UNom)" annotation(
          Placement(visible = true, transformation(origin = {-121, -60}, extent = {{-21, -21}, {21, 21}}, rotation = 0), iconTransformation(origin = {111, 1.33227e-15}, extent = {{-10, -10}, {10, 10}}, rotation = 180)));

    Modelica.Blocks.Interfaces.RealOutput PagPu(start = -P0Pu*(SystemBase.SnRef / SNom)) "q-axis current at the WTT in p.u (base UNom)" annotation(
          Placement(visible = true, transformation(origin = {121, -70}, extent = {{-21, -21}, {21, 21}}, rotation = 0), iconTransformation(origin = {-1.33227e-15, -111}, extent = {{-11, -11}, {11, 11}}, rotation = -90)));
    Modelica.Blocks.Interfaces.RealOutput udGsPu(start = udGs0Pu) "d-axis voltage at the WTT in p.u (base UNom)" annotation(
          Placement(visible = true, transformation(origin = {121, 70}, extent = {{-21, -21}, {21, 21}}, rotation = 0), iconTransformation(origin = {60, -111}, extent = {{-11, -11}, {11, 11}}, rotation = -90)));
    Modelica.Blocks.Interfaces.RealOutput uqGsPu(start = uqGs0Pu) "q-axis voltage at the WTT in p.u (base UNom)" annotation(
          Placement(visible = true, transformation(origin = {121, 0}, extent = {{-21, -21}, {21, 21}}, rotation = 0), iconTransformation(origin = {-60, -111}, extent = {{-11, -11}, {11, 11}}, rotation = -90)));

    Types.PerUnit PGenPu(start = -P0Pu) "Active power generated by the converter at the PCC in p.u (base UNom, SnRef) (generator convention)";

  equation

    if running then

  /* Electrical System dynamic equation */
    (Les / SystemBase.omegaNom) * der(terminal.i.re) = udGsPu - Res * terminal.i.re + omegaPu * Les * terminal.i.im - terminal.V.re;
    (Les / SystemBase.omegaNom) * der(terminal.i.im) = uqGsPu - Res * terminal.i.im - omegaPu * Les * terminal.i.re - terminal.V.im;

   /* Injected power at WTT and system bases */
     PagPu = udGsPu * idGsPu + uqGsPu * iqGsPu;

      else

      idGsPu = 0;
      iqGsPu = 0;
      terminal.i.re = 0;
      terminal.i.im = 0;
      PagPu = 0;

    end if;
  annotation(
      Icon(graphics = {Rectangle(fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, extent = {{-100, 100}, {100, -100}}), Text(origin = {30, -8}, extent = {{-60, 54}, {0, 18}}, textString = "Electrical", fontSize = 14), Text(origin = {22, -54}, extent = {{-60, 54}, {16, -8}}, textString = "System", fontSize = 14)}, coordinateSystem(initialScale = 0.1)));

   end ElectricalSystem;

  package GeneratorSystem

    model GeneratorModel

      import Modelica;
      import Dynawo;
      import Dynawo.Types;
      import Dynawo.Electrical.SystemBase;

      parameter Types.Angle Theta0 "Start value of the phase shift between the converter's rotating frame and the grid rotating frame in radians";
      parameter Types.PerUnit Tg;
      parameter Types.PerUnit idCmd0Pu;
      parameter Types.PerUnit iqCmd0Pu;
      parameter Types.PerUnit idMax0Pu;
      parameter Types.PerUnit idMin0Pu;
      parameter Types.PerUnit iqMin0Pu;

    Modelica.Blocks.Interfaces.RealInput idCmdPu(start=idCmd0Pu) annotation(
        Placement(visible = true, transformation(origin = {-116, 50}, extent = {{-16, -16}, {16, 16}}, rotation = 0), iconTransformation(origin = {110, 40}, extent = {{-10, -10}, {10, 10}}, rotation = 180)));
    Modelica.Blocks.Interfaces.RealInput iqCmdPu(start= iqCmd0Pu) annotation(
        Placement(visible = true, transformation(origin = {-116, -50}, extent = {{-16, -16}, {16, 16}}, rotation = 0), iconTransformation(origin = {110, -40}, extent = {{-10, -10}, {10, 10}}, rotation = 180)));
    Modelica.Blocks.Interfaces.RealInput idMaxPu(start=idMax0Pu) annotation(
        Placement(visible = true, transformation(origin = {-116, 90}, extent = {{-16, -16}, {16, 16}}, rotation = 0), iconTransformation(origin = {110, 80}, extent = {{-10, -10}, {10, 10}}, rotation = 180)));
    Modelica.Blocks.Interfaces.RealInput iqMaxPu(start=idMax0Pu) annotation(
        Placement(visible = true, transformation(origin = {-116, -12}, extent = {{-16, -16}, {16, 16}}, rotation = 0), iconTransformation(origin = {110, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 180)));
    Modelica.Blocks.Interfaces.RealInput iqMinPu(start=iqMin0Pu) annotation(
        Placement(visible = true, transformation(origin = {-116, -88}, extent = {{-16, -16}, {16, 16}}, rotation = 0), iconTransformation(origin = {110, -80}, extent = {{-10, -10}, {10, 10}}, rotation = 180)));
    Modelica.Blocks.Interfaces.RealInput theta(start = Theta0) annotation(
        Placement(visible = true, transformation(origin = {0, -118}, extent = {{-18, -18}, {18, 18}}, rotation = 90), iconTransformation(origin = {0, -110}, extent = {{-10, -10}, {10, 10}}, rotation = 90)));

    Modelica.Blocks.Interfaces.RealOutput idGsPu(start = (idCmd0Pu*sin(Theta0) - iqCmd0Pu*cos(Theta0))) annotation(
        Placement(visible = true, transformation(origin = {120, 30}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-110, 60}, extent = {{-10, -10}, {10, 10}}, rotation = 180)));
    Modelica.Blocks.Interfaces.RealOutput iqGsPu(start=-idCmd0Pu*cos(Theta0) - iqCmd0Pu*sin(Theta0)) annotation(
        Placement(visible = true, transformation(origin = {120, -30}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-110, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 180)));

    Dynawo.Electrical.Sources.WTModel.GeneratorSystem.RefFrameRotation refFrameRotation annotation(
        Placement(visible = true, transformation(origin = {32.5, -0.333333}, extent = {{-18.1, -60.3333}, {18.1, 60.3333}}, rotation = 0)));

    Modelica.Blocks.Continuous.FirstOrder firstOrder1(T = Tg) annotation(
        Placement(visible = true, transformation(origin = {-70, -50}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    Modelica.Blocks.Continuous.FirstOrder firstOrder(T = Tg)  annotation(
        Placement(visible = true, transformation(origin = {-70, 50}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));

    Modelica.Blocks.Nonlinear.VariableLimiter variableLimiter(limitsAtInit = true)  annotation(
        Placement(visible = true, transformation(origin = {-34, 50}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    Modelica.Blocks.Nonlinear.VariableLimiter variableLimiter1(limitsAtInit = true) annotation(
        Placement(visible = true, transformation(origin = {-34, -50}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));

    equation

    connect(firstOrder.y, variableLimiter.u) annotation(
        Line(points = {{-59, 50}, {-46, 50}}, color = {0, 0, 127}));
    connect(idCmdPu, firstOrder.u) annotation(
        Line(points = {{-116, 50}, {-82, 50}}, color = {0, 0, 127}));
  connect(iqCmdPu, firstOrder1.u) annotation(
        Line(points = {{-116, -50}, {-82, -50}}, color = {0, 0, 127}));
  connect(firstOrder1.y, variableLimiter1.u) annotation(
        Line(points = {{-59, -50}, {-46, -50}}, color = {0, 0, 127}));
    connect(idMaxPu, variableLimiter.limit1) annotation(
        Line(points = {{-116, 90}, {-54, 90}, {-54, 58}, {-46, 58}, {-46, 58}}, color = {0, 0, 127}));
  connect(iqMaxPu, variableLimiter1.limit1) annotation(
        Line(points = {{-116, -12}, {-54, -12}, {-54, -42}, {-46, -42}}, color = {0, 0, 127}));
  connect(iqMinPu, variableLimiter1.limit2) annotation(
        Line(points = {{-116, -88}, {-54, -88}, {-54, -58}, {-46, -58}}, color = {0, 0, 127}));
    connect(variableLimiter.y, refFrameRotation.iqCmdPu) annotation(
        Line(points = {{-22, 50}, {-12, 50}, {-12, 30}, {8, 30}}, color = {0, 0, 127}));
  connect(variableLimiter1.y, refFrameRotation.idCmdPu) annotation(
        Line(points = {{-23, -50}, {-12, -50}, {-12, -30}, {8, -30}}, color = {0, 0, 127}));
    connect(refFrameRotation.idGsPu, idGsPu) annotation(
        Line(points = {{58, 30}, {106, 30}, {106, 30}, {120, 30}}, color = {0, 0, 127}));
    connect(refFrameRotation.iqGsPu, iqGsPu) annotation(
        Line(points = {{58, -30}, {106, -30}, {106, -30}, {120, -30}}, color = {0, 0, 127}));
    connect(theta, refFrameRotation.theta) annotation(
        Line(points = {{0, -118}, {0, -118}, {0, -86}, {32, -86}, {32, -66}, {32, -66}}, color = {0, 0, 127}));

    annotation(
        Icon(graphics = {Rectangle(fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, extent = {{-100, 100}, {100, -100}}), Text(origin = {2, 1}, extent = {{-68, 69}, {68, -69}}, textString = "Generator", fontSize = 16)}));end GeneratorModel;
    extends Icons.Package;

    model RefFrameRotation

      import Modelica;
      import Dynawo;
      import Dynawo.Types;
      import Dynawo.Electrical.SystemBase;

      parameter Types.Angle Theta0 "Start value of the phase shift between the converter's rotating frame and the grid rotating frame in radians";
      parameter Types.PerUnit Res "Electrical System resistance in p.u (base UNom, SNom)";
      parameter Types.PerUnit Les "Electrical System inductance in p.u (base UNom, SNom)";
      parameter Types.ComplexPerUnit u0Pu "Start value of the complex voltage at plant terminal (PCC) in p.u (base UNom)";
      parameter Types.ComplexPerUnit i0Pu "Start value of the complex current at plant terminal (PCC) in p.u (base UNom, SnRef) (receptor convention)";
      parameter Types.PerUnit IdCmdOPu;
      parameter Types.PerUnit IqCmdOPu;

      Modelica.Blocks.Interfaces.BooleanInput running(start = true) annotation(
            Placement(visible = true, transformation(origin = {0, 120}, extent = {{-19, -19}, {19, 19}}, rotation = -90), iconTransformation(origin = {0, 110}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
      Modelica.Blocks.Interfaces.RealInput theta(start = Theta0) "Phase shift between the converter's rotating frame and the grid rotating frame in radians" annotation(
            Placement(visible = true, transformation(origin = {1, -120}, extent = {{-20, -20}, {20, 20}}, rotation = 90), iconTransformation(origin = {0, -110}, extent = {{-10, -10}, {10, 10}}, rotation = 90)));

      Modelica.Blocks.Interfaces.RealInput idCmdPu(start = IdCmdOPu) "d-axis current at the WTT in p.u (base UNom)" annotation(
            Placement(visible = true, transformation(origin = {-51, 50}, extent = {{-21, -21}, {21, 21}}, rotation = 0), iconTransformation(origin = {-41, -50}, extent = {{-10, -10}, {10, 10}}, rotation = 0))) ;
      Modelica.Blocks.Interfaces.RealInput iqCmdPu(start = IqCmdOPu) "q-axis current at the WTT in p.u (base UNom)" annotation(
            Placement(visible = true, transformation(origin = {-51, -50}, extent = {{-21, -21}, {21, 21}}, rotation = 0), iconTransformation(origin = {-41, 50}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));

      Modelica.Blocks.Interfaces.RealOutput idGsPu(start = i0Pu.re) "d-axis current at the WTT in p.u (base UNom)" annotation(
            Placement(visible = true, transformation(origin = {51, 50}, extent = {{-21, -21}, {21, 21}}, rotation = 0), iconTransformation(origin = {41, 50}, extent = {{-10, -10}, {10, 10}}, rotation = 0))) ;
      Modelica.Blocks.Interfaces.RealOutput iqGsPu(start = i0Pu.im) "q-axis current at the WTT in p.u (base UNom)" annotation(
            Placement(visible = true, transformation(origin = {51, -50}, extent = {{-21, -21}, {21, 21}}, rotation = 0), iconTransformation(origin = {41, -50}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));

    equation

      if running then

    /* DQ reference frame change from network reference to converter reference and p.u base change */
       [idGsPu; iqGsPu] = -[cos(theta), sin(theta); -sin(theta), cos(theta)] * [idCmdPu; iqCmdPu];

      else

        idGsPu = 0;
        iqGsPu = 0;
        idCmdPu = 0;
        iqCmdPu = 0;

      end if;

    annotation(
        Diagram(coordinateSystem(extent = {{-30, -100}, {30, 100}})),
        Icon(coordinateSystem(extent = {{-30, -100}, {30, 100}}), graphics = {Text(origin = {0, 1}, rotation = 90, extent = {{-34, 35}, {34, -35}}, textString = "Reference Frame Rotation", fontSize = 12), Rectangle(origin = {1, 0}, extent = {{-31, 100}, {29, -100}})}));end RefFrameRotation;

    model PLL

      import Modelica;
      import Dynawo;
      import Dynawo.Types;
      import Dynawo.Electrical.SystemBase;

      parameter Types.Angle Theta0 "Start value of the phase shift between the converter's rotating frame and the grid rotating frame in radians";
      parameter Types.PerUnit uPll1;
      parameter Types.PerUnit udGs0Pu;
      parameter Types.PerUnit uqGs0Pu;


    Modelica.Blocks.Interfaces.RealInput udGsPu(start = udGs0Pu) annotation(
        Placement(visible = true, transformation(origin = {-120, 40}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {50, 110}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
    Modelica.Blocks.Interfaces.RealInput uqGsPu(start = uqGs0Pu) annotation(
        Placement(visible = true, transformation(origin = {-120, -40}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-50, 110}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));

    Modelica.Blocks.Interfaces.RealOutput theta(start = Theta0) annotation(
        Placement(visible = true, transformation(origin = {120, 0}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {111, -1}, extent = {{-11, -11}, {11, 11}}, rotation = 0)));

  Modelica.Blocks.Logical.Switch switch1 annotation(
        Placement(visible = true, transformation(origin = {68, 4.88498e-15}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
  Modelica.Blocks.Continuous.FirstOrder firstOrder annotation(
        Placement(visible = true, transformation(origin = {0, -40}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Math.RectangularToPolar rectangularToPolar annotation(
        Placement(visible = true, transformation(origin = {-60, 0}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
  Modelica.Blocks.Logical.Less less annotation(
        Placement(visible = true, transformation(origin = {10, 50}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Sources.Constant const(k = uPll1)  annotation(
        Placement(visible = true, transformation(origin = {-50, 70}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));

    equation

  connect(firstOrder.y, switch1.u3) annotation(
        Line(points = {{11, -40}, {20.5, -40}, {20.5, -16}, {44, -16}}, color = {0, 0, 127}));
  connect(udGsPu, rectangularToPolar.u_re) annotation(
        Line(points = {{-120, 40}, {-94, 40}, {-94, 12}, {-84, 12}, {-84, 12}}, color = {0, 0, 127}));
  connect(uqGsPu, rectangularToPolar.u_im) annotation(
        Line(points = {{-120, -40}, {-94, -40}, {-94, -12}, {-84, -12}, {-84, -12}}, color = {0, 0, 127}));
  connect(const.y, less.u1) annotation(
        Line(points = {{-38, 70}, {-24, 70}, {-24, 50}, {-2, 50}}, color = {0, 0, 127}));
  connect(rectangularToPolar.y_arg, firstOrder.u) annotation(
        Line(points = {{-38, -12}, {-26, -12}, {-26, -40}, {-12, -40}, {-12, -40}}, color = {0, 0, 127}));
  connect(rectangularToPolar.y_abs, less.u2) annotation(
        Line(points = {{-38, 12}, {-20, 12}, {-20, 42}, {-2, 42}}, color = {0, 0, 127}));
  connect(rectangularToPolar.y_arg, switch1.u1) annotation(
        Line(points = {{-38, -12}, {0, -12}, {0, 16}, {44, 16}, {44, 16}}, color = {0, 0, 127}));
  connect(less.y, switch1.u2) annotation(
        Line(points = {{21, 50}, {30, 50}, {30, 0}, {44, 0}}, color = {255, 0, 255}));
  connect(switch1.y, theta) annotation(
        Line(points = {{90, 0}, {106, 0}, {106, 0}, {120, 0}}, color = {0, 0, 127}));

    annotation(
        Icon(graphics = {Rectangle(extent = {{-100, 100}, {100, -100}}), Text(origin = {2, -1}, extent = {{-44, 41}, {44, -41}}, textString = "PLL", fontSize = 20)}));end PLL;

  end GeneratorSystem;

end WTModel;
